spring的相关配置

	1.
	XmlBeanFactory factory = new XmlBeanFactory
								(new ClassPathResource("Beans.xml"));
	HelloWorld obj = (HelloWorld) factory.getBean("helloWorld");//XmlBeanFactory类

	2.
	ApplicationContext context = new FileSystemXmlApplicationContext
            						("C:/Users/ZARA/workspace/HelloSpring/src/Beans.xml");
    HelloWorld obj = (HelloWorld) context.getBean("helloWorld");

    3.
    专为web工程定制的方法,例如：

	ServletContext servletContext = request.getSession().getServletContext();

	ApplicationContext ctx = WebApplicationContextUtils.getWebApplicationContext(servletContext);
	4.
	ApplicationContext factory = new ClassPathXmlApplicationContext("Beans.xml");

	1)aop注解配置:
	<aop:aspectj-autoproxy/>开启

	@Aspect
	public class Logging {
	   @Pointcut("execution(* com.tutorialspoint.*.*(..))")
	   private void selectAll(){}

	   @Before("selectAll()")
	   public void beforeAdvice(){
	      System.out.println("Going to setup student profile.");
	   }

	   @After("selectAll()")
	   public void afterAdvice(){
	      
	   }

	   @AfterReturning(pointcut = "selectAll()", returning="retVal")
	   public void afterReturningAdvice(Object retVal){
	      
	   }

	   @AfterThrowing(pointcut = "selectAll()", throwing = "ex")
	   public void AfterThrowingAdvice(IllegalArgumentException ex){
	      
	      }
	}   
   	2).aop的基于xml配置
   	<aop:config>
   		<aop:aspect id="myAspect" ref="aBean">
   			<aop:pointcut id="businessService"
      			expression="execution(* com.xyz.myapp.service.*.*(..))"/>
   			<aop:before pointcut-ref="selectAll" method="beforeAdvice"/>
         	<aop:after pointcut-ref="selectAll" method="afterAdvice"/>
         	<aop:after-returning pointcut-ref="selectAll" 
                              returning="retVal"
                              method="afterReturningAdvice"/>
         	<aop:after-throwing pointcut-ref="selectAll" 
                             throwing="ex"
                             method="AfterThrowingAdvice"/>
   		</aop:aspect>
	</aop:config>
	<bean id="aBean" class="">
	
	</bean>
事务：

	事务隔离级别4种:
	1).TransactionDefinition.ISOLATION_DEFAULT：这是默认值，表示使用底层数据库的默认隔离级别。对大部分数据库而言，通常这值就是TransactionDefinition.ISOLATION_READ_COMMITTED。
	2).TransactionDefinition.ISOLATION_READ_UNCOMMITTED：该隔离级别表示一个事务可以读取另一个事务修改但还没有提交的数据。该级别不能防止脏读，不可重复读和幻读，因此很少使用该隔离级别。比如PostgreSQL实际上并没有此级别。
	3).TransactionDefinition.ISOLATION_READ_COMMITTED：该隔离级别表示一个事务只能读取另一个事务已经提交的数据。该级别可以防止脏读，这也是大多数情况下的推荐值。
	4).TransactionDefinition.ISOLATION_REPEATABLE_READ：该隔离级别表示一个事务在整个过程中可以多次重复执行某个查询，并且每次返回的记录都相同。该级别可以防止脏读和不可重复读。
	5).TransactionDefinition.ISOLATION_SERIALIZABLE：所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。
	事务传播行为7种:
	1).TransactionDefinition.PROPAGATION_REQUIRED：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。这是默认值。
	2).TransactionDefinition.PROPAGATION_REQUIRES_NEW：创建一个新的事务，如果当前存在事务，则把当前事务挂起。
	3).TransactionDefinition.PROPAGATION_SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。
	4).TransactionDefinition.PROPAGATION_NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起。
	5).TransactionDefinition.PROPAGATION_NEVER：以非事务方式运行，如果当前存在事务，则抛出异常。
	6).TransactionDefinition.PROPAGATION_MANDATORY：如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。
	7).TransactionDefinition.PROPAGATION_NESTED：如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。

	声明式事务:
	<tx:advice id="txAdvice"  transaction-manager="transactionManager">
      <tx:attributes>
      <tx:method name="create"/>
      </tx:attributes>
   </tx:advice>

   <aop:config>
      <aop:pointcut id="createOperation" 
      expression="execution(* com.tutorialspoint.StudentJDBCTemplate.create(..))"/>
      <aop:advisor advice-ref="txAdvice" pointcut-ref="createOperation"/>
   </aop:config>


	编程式事务:
	 public void setDataSource(DataSource dataSource) {
      this.dataSource = dataSource;
      this.jdbcTemplateObject = new JdbcTemplate(dataSource);
   }
   public void setTransactionManager(
      PlatformTransactionManager transactionManager) {
      this.transactionManager = transactionManager;
   }
   public void create(String name, Integer age, Integer marks, Integer year){
      TransactionDefinition def = new DefaultTransactionDefinition();
      TransactionStatus status = transactionManager.getTransaction(def);
      try {
         String SQL1 = "insert into Student (name, age) values (?, ?)";
         jdbcTemplateObject.update( SQL1, name, age);
        
         String SQL3 = "insert into Marks(sid, marks, year) " + 
                       "values (?, ?, ?)";
         jdbcTemplateObject.update( SQL3, sid, marks, year);
         System.out.println("Created Name = " + name + ", Age = " + age);
         transactionManager.commit(status);
      } catch (DataAccessException e) {
         
         transactionManager.rollback(status);
         
      }

      存储过程:

      CREATE
    [DEFINER = { user | CURRENT_USER }]
　　PROCEDURE sp_name ([proc_parameter[,...]])
    [characteristic ...] routine_body

	proc_parameter:
	    [ IN | OUT | INOUT ] param_name type

	characteristic:
	    COMMENT 'string'
	  | LANGUAGE SQL
	  | [NOT] DETERMINISTIC
	  | { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA }
	  | SQL SECURITY { DEFINER | INVOKER }

	routine_body:
	　　Valid SQL routine statement

	[begin_label:] BEGIN
	　　[statement_list]
	　　　　……
	END [end_label]